import numpy as np

def rouwenhorst(N, gamma, sigma=1):
    """
    Rouwenhorst's method to discretize an AR(1) process.
    
    Parameters:
    N : int
        Number of states in the Markov chain.
    gamma : float
        Autoregressive coefficient.
    sigma : float, optional
        Standard deviation of the innovation. Default is 1.
    
    Returns:
    y : numpy array
        State vector.
    P : numpy array
        Transition matrix.
    """
    # Step size
    Delta = np.sqrt((N-1) * sigma**2 / (1 - gamma**2))
    
    # State vector
    y = np.linspace(-Delta, Delta, N)
    
    # Transition matrix
    p = (1 + gamma) / 2
    P = np.array([[p, 1-p], [1-p, p]])
    
    for n in range(3, N+1):
        P = p * np.pad(P, ((0,1), (0,1)), mode='constant') + \
            (1-p) * np.pad(np.flip(P, axis=0), ((0,1), (0,1)), mode='constant') + \
            (1-p) * np.pad(np.flip(P, axis=1), ((0,1), (0,1)), mode='constant') + \
            p * np.pad(np.flip(np.flip(P, axis=0), axis=1), ((0,1), (0,1)), mode='constant')
        P[1:-1, :] /= 2
    
    return y, P

# Parameters
N = 7
gamma = 0.85

# Discretize the AR(1) process
y, P = rouwenhorst(N, gamma)

print("State vector (y):", y)
print("Transition matrix (P):\n", P)
